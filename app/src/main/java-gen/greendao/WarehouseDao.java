package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.Warehouse;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table WAREHOUSE.
*/
public class WarehouseDao extends AbstractDao<Warehouse, Long> {

    public static final String TABLENAME = "WAREHOUSE";

    /**
     * Properties of entity Warehouse.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Warehouse_id = new Property(0, Long.class, "warehouse_id", true, "WAREHOUSE_ID");
        public final static Property Warehouse_code = new Property(1, String.class, "warehouse_code", false, "WAREHOUSE_CODE");
        public final static Property Warehouse_name = new Property(2, String.class, "warehouse_name", false, "WAREHOUSE_NAME");
    };


    public WarehouseDao(DaoConfig config) {
        super(config);
    }
    
    public WarehouseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'WAREHOUSE' (" + //
                "'WAREHOUSE_ID' INTEGER PRIMARY KEY ," + // 0: warehouse_id
                "'WAREHOUSE_CODE' TEXT," + // 1: warehouse_code
                "'WAREHOUSE_NAME' TEXT);"); // 2: warehouse_name
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'WAREHOUSE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Warehouse entity) {
        stmt.clearBindings();
 
        Long warehouse_id = entity.getWarehouse_id();
        if (warehouse_id != null) {
            stmt.bindLong(1, warehouse_id);
        }
 
        String warehouse_code = entity.getWarehouse_code();
        if (warehouse_code != null) {
            stmt.bindString(2, warehouse_code);
        }
 
        String warehouse_name = entity.getWarehouse_name();
        if (warehouse_name != null) {
            stmt.bindString(3, warehouse_name);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Warehouse readEntity(Cursor cursor, int offset) {
        Warehouse entity = new Warehouse( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // warehouse_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // warehouse_code
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // warehouse_name
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Warehouse entity, int offset) {
        entity.setWarehouse_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWarehouse_code(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWarehouse_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Warehouse entity, long rowId) {
        entity.setWarehouse_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Warehouse entity) {
        if(entity != null) {
            return entity.getWarehouse_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
