package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.Asset;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ASSET.
*/
public class AssetDao extends AbstractDao<Asset, Long> {

    public static final String TABLENAME = "ASSET";

    /**
     * Properties of entity Asset.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Asset_id = new Property(0, Long.class, "asset_id", true, "ASSET_ID");
        public final static Property Asset_code = new Property(1, String.class, "asset_code", false, "ASSET_CODE");
        public final static Property Company_id = new Property(2, Long.class, "company_id", false, "COMPANY_ID");
        public final static Property Department_id = new Property(3, Long.class, "department_id", false, "DEPARTMENT_ID");
        public final static Property Category_id = new Property(4, Long.class, "category_id", false, "CATEGORY_ID");
        public final static Property Sub_category_id = new Property(5, Long.class, "sub_category_id", false, "SUB_CATEGORY_ID");
        public final static Property Warehouse_id = new Property(6, Long.class, "warehouse_id", false, "WAREHOUSE_ID");
        public final static Property Seri = new Property(7, String.class, "seri", false, "SERI");
        public final static Property Warehouse_seri = new Property(8, String.class, "warehouse_seri", false, "WAREHOUSE_SERI");
        public final static Property User_using = new Property(9, String.class, "user_using", false, "USER_USING");
        public final static Property Name = new Property(10, String.class, "name", false, "NAME");
        public final static Property F_active = new Property(11, Integer.class, "f_active", false, "F_ACTIVE");
        public final static Property Created_at = new Property(12, String.class, "created_at", false, "CREATED_AT");
        public final static Property Updated_at = new Property(13, String.class, "updated_at", false, "UPDATED_AT");
        public final static Property Department_name = new Property(14, String.class, "department_name", false, "DEPARTMENT_NAME");
        public final static Property Session_id = new Property(15, Long.class, "session_id", false, "SESSION_ID");
        public final static Property Status = new Property(16, Integer.class, "status", false, "STATUS");
    };


    public AssetDao(DaoConfig config) {
        super(config);
    }
    
    public AssetDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ASSET' (" + //
                "'ASSET_ID' INTEGER PRIMARY KEY ," + // 0: asset_id
                "'ASSET_CODE' TEXT," + // 1: asset_code
                "'COMPANY_ID' INTEGER," + // 2: company_id
                "'DEPARTMENT_ID' INTEGER," + // 3: department_id
                "'CATEGORY_ID' INTEGER," + // 4: category_id
                "'SUB_CATEGORY_ID' INTEGER," + // 5: sub_category_id
                "'WAREHOUSE_ID' INTEGER," + // 6: warehouse_id
                "'SERI' TEXT," + // 7: seri
                "'WAREHOUSE_SERI' TEXT," + // 8: warehouse_seri
                "'USER_USING' TEXT," + // 9: user_using
                "'NAME' TEXT," + // 10: name
                "'F_ACTIVE' INTEGER," + // 11: f_active
                "'CREATED_AT' TEXT," + // 12: created_at
                "'UPDATED_AT' TEXT," + // 13: updated_at
                "'DEPARTMENT_NAME' TEXT," + // 14: department_name
                "'SESSION_ID' INTEGER," + // 15: session_id
                "'STATUS' INTEGER);"); // 16: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ASSET'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Asset entity) {
        stmt.clearBindings();
 
        Long asset_id = entity.getAsset_id();
        if (asset_id != null) {
            stmt.bindLong(1, asset_id);
        }
 
        String asset_code = entity.getAsset_code();
        if (asset_code != null) {
            stmt.bindString(2, asset_code);
        }
 
        Long company_id = entity.getCompany_id();
        if (company_id != null) {
            stmt.bindLong(3, company_id);
        }
 
        Long department_id = entity.getDepartment_id();
        if (department_id != null) {
            stmt.bindLong(4, department_id);
        }
 
        Long category_id = entity.getCategory_id();
        if (category_id != null) {
            stmt.bindLong(5, category_id);
        }
 
        Long sub_category_id = entity.getSub_category_id();
        if (sub_category_id != null) {
            stmt.bindLong(6, sub_category_id);
        }
 
        Long warehouse_id = entity.getWarehouse_id();
        if (warehouse_id != null) {
            stmt.bindLong(7, warehouse_id);
        }
 
        String seri = entity.getSeri();
        if (seri != null) {
            stmt.bindString(8, seri);
        }
 
        String warehouse_seri = entity.getWarehouse_seri();
        if (warehouse_seri != null) {
            stmt.bindString(9, warehouse_seri);
        }
 
        String user_using = entity.getUser_using();
        if (user_using != null) {
            stmt.bindString(10, user_using);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(11, name);
        }
 
        Integer f_active = entity.getF_active();
        if (f_active != null) {
            stmt.bindLong(12, f_active);
        }
 
        String created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindString(13, created_at);
        }
 
        String updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindString(14, updated_at);
        }
 
        String department_name = entity.getDepartment_name();
        if (department_name != null) {
            stmt.bindString(15, department_name);
        }
 
        Long session_id = entity.getSession_id();
        if (session_id != null) {
            stmt.bindLong(16, session_id);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(17, status);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Asset readEntity(Cursor cursor, int offset) {
        Asset entity = new Asset( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // asset_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // asset_code
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // company_id
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // department_id
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // category_id
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // sub_category_id
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // warehouse_id
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // seri
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // warehouse_seri
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // user_using
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // name
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // f_active
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // created_at
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // updated_at
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // department_name
            cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15), // session_id
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16) // status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Asset entity, int offset) {
        entity.setAsset_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAsset_code(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCompany_id(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setDepartment_id(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setCategory_id(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setSub_category_id(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setWarehouse_id(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setSeri(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setWarehouse_seri(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUser_using(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setF_active(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setCreated_at(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setUpdated_at(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDepartment_name(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSession_id(cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15));
        entity.setStatus(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Asset entity, long rowId) {
        entity.setAsset_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Asset entity) {
        if(entity != null) {
            return entity.getAsset_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
