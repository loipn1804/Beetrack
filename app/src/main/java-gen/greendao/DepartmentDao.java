package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.Department;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DEPARTMENT.
*/
public class DepartmentDao extends AbstractDao<Department, Long> {

    public static final String TABLENAME = "DEPARTMENT";

    /**
     * Properties of entity Department.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Department_id = new Property(0, Long.class, "department_id", true, "DEPARTMENT_ID");
        public final static Property Department_code = new Property(1, String.class, "department_code", false, "DEPARTMENT_CODE");
        public final static Property Department_name = new Property(2, String.class, "department_name", false, "DEPARTMENT_NAME");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
    };


    public DepartmentDao(DaoConfig config) {
        super(config);
    }
    
    public DepartmentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DEPARTMENT' (" + //
                "'DEPARTMENT_ID' INTEGER PRIMARY KEY ," + // 0: department_id
                "'DEPARTMENT_CODE' TEXT," + // 1: department_code
                "'DEPARTMENT_NAME' TEXT," + // 2: department_name
                "'DESCRIPTION' TEXT);"); // 3: description
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DEPARTMENT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Department entity) {
        stmt.clearBindings();
 
        Long department_id = entity.getDepartment_id();
        if (department_id != null) {
            stmt.bindLong(1, department_id);
        }
 
        String department_code = entity.getDepartment_code();
        if (department_code != null) {
            stmt.bindString(2, department_code);
        }
 
        String department_name = entity.getDepartment_name();
        if (department_name != null) {
            stmt.bindString(3, department_name);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Department readEntity(Cursor cursor, int offset) {
        Department entity = new Department( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // department_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // department_code
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // department_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // description
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Department entity, int offset) {
        entity.setDepartment_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDepartment_code(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDepartment_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Department entity, long rowId) {
        entity.setDepartment_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Department entity) {
        if(entity != null) {
            return entity.getDepartment_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
