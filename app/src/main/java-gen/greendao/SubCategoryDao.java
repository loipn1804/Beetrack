package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.SubCategory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SUB_CATEGORY.
*/
public class SubCategoryDao extends AbstractDao<SubCategory, Long> {

    public static final String TABLENAME = "SUB_CATEGORY";

    /**
     * Properties of entity SubCategory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Sub_category_id = new Property(0, Long.class, "sub_category_id", true, "SUB_CATEGORY_ID");
        public final static Property Category_id = new Property(1, Long.class, "category_id", false, "CATEGORY_ID");
        public final static Property Sub_category_name = new Property(2, String.class, "sub_category_name", false, "SUB_CATEGORY_NAME");
    };


    public SubCategoryDao(DaoConfig config) {
        super(config);
    }
    
    public SubCategoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SUB_CATEGORY' (" + //
                "'SUB_CATEGORY_ID' INTEGER PRIMARY KEY ," + // 0: sub_category_id
                "'CATEGORY_ID' INTEGER," + // 1: category_id
                "'SUB_CATEGORY_NAME' TEXT);"); // 2: sub_category_name
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SUB_CATEGORY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SubCategory entity) {
        stmt.clearBindings();
 
        Long sub_category_id = entity.getSub_category_id();
        if (sub_category_id != null) {
            stmt.bindLong(1, sub_category_id);
        }
 
        Long category_id = entity.getCategory_id();
        if (category_id != null) {
            stmt.bindLong(2, category_id);
        }
 
        String sub_category_name = entity.getSub_category_name();
        if (sub_category_name != null) {
            stmt.bindString(3, sub_category_name);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SubCategory readEntity(Cursor cursor, int offset) {
        SubCategory entity = new SubCategory( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // sub_category_id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // category_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // sub_category_name
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SubCategory entity, int offset) {
        entity.setSub_category_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCategory_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setSub_category_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SubCategory entity, long rowId) {
        entity.setSub_category_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SubCategory entity) {
        if(entity != null) {
            return entity.getSub_category_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
